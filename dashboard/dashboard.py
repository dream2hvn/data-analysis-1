# -*- coding: utf-8 -*-
"""dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jLkMBqEcYu9kGdH7GQN7AHa24ml_MEOH
"""

pip install streamlit babel

pip install --upgrade pip

from google.colab import drive
drive.mount('/content/drive')

pip install streamlit

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from babel.numbers import format_currency
sns.set(style='dark')
import geopy
from geopy.geocoders import Nominatim
import pydeck as pdk
import plotly.express as px

all_data = pd.read_csv('/content/drive/MyDrive/FINSUB COPY/main_data.csv')

# Main title (Judul Besar)
st.title('Dashboard Sederhana')

# Subtitle to give context to the data analysis
st.header('Analisis Produk dan Biaya Pengiriman')

# Top Product Categories
st.subheader('Top 10 Kategori Produk yang Dibeli Pelanggan')
category_counts = data['product_category_name'].value_counts().head(10)
st.bar_chart(category_counts)

# Price Distribution
st.subheader('Distribusi Harga Produk')
fig, ax = plt.subplots()
ax.hist(data['price'], bins=20, color='skyblue')
st.pyplot(fig)

# Freight Value per Category
st.subheader('Biaya Pengiriman Rata-rata per Kategori Produk')
freight_by_category = data.groupby('product_category_name')['freight_value'].mean().sort_values(ascending=False).head(10)
st.bar_chart(freight_by_category)

# Title of the app
st.title('Customer Behavior Analysis')

# Top Product Categories
st.subheader('Top Product Categories by Count')
category_counts = data['product_category_name'].value_counts().head(10)
st.bar_chart(category_counts)

# Price Distribution
st.subheader('Price Distribution')
fig, ax = plt.subplots()
ax.hist(data['price'], bins=20, color='skyblue')
st.pyplot(fig)

# Freight Value per Category
st.subheader('Freight Value per Product Category')
freight_by_category = data.groupby('product_category_name')['freight_value'].mean().sort_values(ascending=False).head(10)
st.bar_chart(freight_by_category)

# Subtitle to give context to the data analysis
st.header('Distribusi Penjual dan Pelanggan Berdasarkan Pendapatan dan Pesanan')

# --- Visualization 1: Top Sellers by Total Revenue ---
st.subheader('Top 10 Penjual Berdasarkan Total Pendapatan')
seller_revenue = data.groupby('seller_id')['price'].sum().sort_values(ascending=False).head(10)
st.bar_chart(seller_revenue)

# --- Visualization 2: Distribution of Orders per Customer ---
st.subheader('Distribusi Pesanan oleh Pelanggan')
customer_order_counts = data['order_id'].value_counts()
fig, ax = plt.subplots()
ax.hist(customer_order_counts, bins=20, color='lightblue')
ax.set_xlabel('Jumlah Pesanan per Pelanggan')
ax.set_ylabel('Jumlah Pelanggan')
ax.set_title('Distribusi Jumlah Pesanan oleh Pelanggan')
st.pyplot(fig)

# --- Visualization 3: Total Revenue by Customer ---
st.subheader('Top 10 Pelanggan Berdasarkan Total Pendapatan')
customer_revenue = data.groupby('order_id')['price'].sum().sort_values(ascending=False).head(10)
st.bar_chart(customer_revenue)

# --- Other Visualizations from the previous section (Optional) ---

# Top Product Categories
st.subheader('Top 10 Kategori Produk yang Dibeli Pelanggan')
category_counts = data['product_category_name'].value_counts().head(10)
st.bar_chart(category_counts)

# Price Distribution
st.subheader('Distribusi Harga Produk')
fig, ax = plt.subplots()
ax.hist(data['price'], bins=20, color='lightgreen')
st.pyplot(fig)

# Freight Value per Category
st.subheader('Biaya Pengiriman Rata-rata per Kategori Produk')
freight_by_category = data.groupby('product_category_name')['freight_value'].mean().sort_values(ascending=False).head(10)
st.bar_chart(freight_by_category)

# Main title (Judul Besar)
st.title('Distribusi Perilaku Pelanggan dan Penjual')

# Subtitle to give context to the data analysis
st.header('Analisis Perilaku Berdasarkan Pesanan, Pendapatan, dan Biaya Pengiriman')

# --- Visualization 1: Top 10 Customers by Number of Orders ---
st.subheader('Top 10 Pelanggan Berdasarkan Jumlah Pesanan')
customer_order_count = data['order_id'].value_counts().head(10)
st.bar_chart(customer_order_count)

# --- Visualization 2: Average Freight Cost per Seller ---
st.subheader('Biaya Pengiriman Rata-rata per Penjual (Top 10)')
avg_freight_seller = data.groupby('seller_id')['freight_value'].mean().sort_values(ascending=False).head(10)
st.bar_chart(avg_freight_seller)

# --- Visualization 3: Heatmap of Price vs Freight Value ---
st.subheader('Heatmap Harga Produk vs Biaya Pengiriman')
fig, ax = plt.subplots()
sns.heatmap(data.pivot_table(index='price', columns='freight_value', aggfunc='size', fill_value=0), ax=ax, cmap='coolwarm')
st.pyplot(fig)

# --- Other Visualizations from the previous section (Optional) ---

# Top Product Categories
st.subheader('Top 10 Kategori Produk yang Dibeli Pelanggan')
category_counts = data['product_category_name'].value_counts().head(10)
st.bar_chart(category_counts)

# Price Distribution
st.subheader('Distribusi Harga Produk')
fig, ax = plt.subplots()
ax.hist(data['price'], bins=20, color='lightcoral')
st.pyplot(fig)

# Freight Value per Category
st.subheader('Biaya Pengiriman Rata-rata per Kategori Produk')
freight_by_category = data.groupby('product_category_name')['freight_value'].mean().sort_values(ascending=False).head(10)
st.bar_chart(freight_by_category)

# Assuming you have latitude and longitude columns in your dataset
# Make sure these columns exist, or adjust the column names accordingly
if 'latitude' in data.columns and 'longitude' in data.columns:
    # Filter out rows with missing or zero latitude/longitude values
    geo_data = data[['latitude', 'longitude']].dropna()

    st.title('Visualisasi Pola Geografis Pelanggan')

    # Show map visualization using Streamlit's map function
    st.map(geo_data)

else:
    st.write("Data does not contain 'latitude' and 'longitude' columns.")

# Check if the dataset contains latitude and longitude columns
if 'latitude' in data.columns and 'longitude' in data.columns:
    # Drop rows with missing values in latitude and longitude
    geo_data = data[['latitude', 'longitude']].dropna()

    # Main title
    st.title('Pola Geografis Pelanggan')

    # Define PyDeck Layer for visualizing points on the map
    layer = pdk.Layer(
        'ScatterplotLayer',
        data=geo_data,
        get_position=['longitude', 'latitude'],
        get_radius=200,
        get_color=[255, 0, 0],  # Red color for points
        pickable=True,
    )

    # Define the PyDeck view and initial position (latitude and longitude)
    view_state = pdk.ViewState(
        latitude=geo_data['latitude'].mean(),
        longitude=geo_data['longitude'].mean(),
        zoom=10,
        pitch=50,
    )

    # Create the PyDeck deck.gl map
    deck = pdk.Deck(
        layers=[layer],
        initial_view_state=view_state,
        tooltip={"text": "Latitude: {latitude}\nLongitude: {longitude}"},
    )

    # Render the map in Streamlit
    st.pydeck_chart(deck)

else:
    st.write("Data tidak memiliki kolom 'latitude' dan 'longitude'.")

# Check if the dataset contains latitude and longitude columns
if 'latitude' in data.columns and 'longitude' in data.columns:
    # Drop rows with missing values in latitude and longitude
    geo_data = data[['latitude', 'longitude']].dropna()

    # Main title
    st.title('Pola Geografis Pelanggan')

    # Scatter plot using Plotly
    st.subheader('Distribusi Lokasi Pelanggan dengan Plotly')

    # Create the Plotly scatter plot for geographic visualization
    fig = px.scatter_geo(geo_data,
                         lat='latitude',
                         lon='longitude',
                         hover_name='latitude',  # Show latitude on hover
                         hover_data=['longitude'],  # Show longitude on hover
                         title='Pola Geografis Pelanggan',
                         projection="natural earth")

    # Show the interactive Plotly chart in Streamlit
    st.plotly_chart(fig)

else:
    st.write("Data tidak memiliki kolom 'latitude' dan 'longitude'.")